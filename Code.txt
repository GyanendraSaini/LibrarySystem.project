package com;
import java.util.*;

class Book {
    private String id;
    private String title;
    private String author;
    private String genre;
    private String availability;

    public Book(String id, String title, String author, String genre, String availability) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.genre = genre;
        this.availability = availability;
    }

    public String getId() { return id; }
    public String getTitle() { return title; }
    public String getAuthor() { return author; }
    public String getGenre() { return genre; }
    public String getAvailability() { return availability; }

    public void setTitle(String title) { this.title = title; }
    public void setAuthor(String author) { this.author = author; }
    public void setGenre(String genre) { this.genre = genre; }
    public void setAvailability(String availability) { this.availability = availability; }

    @Override
    public String toString() {
        return "Book ID: " + id + ", Title: " + title + ", Author: " + author + ", Genre: " + genre + ", Availability: " + availability;
    }
}

public class LibrarySystem {
    private static final Scanner scanner = new Scanner(System.in);
    private static final Map<String, Book> books = new HashMap<>();

    public static void main(String[] args) {
        while (true) {
            System.out.println("\nLibrary Management System");
            System.out.println("1. Add a Book");
            System.out.println("2. View All Books");
            System.out.println("3. Search Book by ID or Title");
            System.out.println("4. Update Book Details");
            System.out.println("5. Delete a Book Record");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine();
            switch (choice) {
                case 1: addBook(); break;
                case 2: viewBooks(); break;
                case 3: searchBook(); break;
                case 4: updateBook(); break;
                case 5: deleteBook(); break;
                case 6: System.out.println("Exiting... Goodbye!"); return;
                default: System.out.println("Invalid choice! Try again.");
            }
        }
    }

    private static void addBook() {
        System.out.print("Enter Book ID: ");
        String id = scanner.nextLine();
        if (books.containsKey(id)) {
            System.out.println("Book ID already exists!");
            return;
        }
        System.out.print("Enter Title: ");
        String title = scanner.nextLine();
        System.out.print("Enter Author: ");
        String author = scanner.nextLine();
        System.out.print("Enter Genre: ");
        String genre = scanner.nextLine();
        System.out.print("Enter Availability (Available/Checked Out): ");
        String availability = scanner.nextLine();
        if (!availability.equalsIgnoreCase("Available") && !availability.equalsIgnoreCase("Checked Out")) {
            System.out.println("Invalid availability status!");
            return;
        }
        books.put(id, new Book(id, title, author, genre, availability));
        System.out.println("Book added successfully!");
    }

    private static void viewBooks() {
        if (books.isEmpty()) {
            System.out.println("No books available.");
            return;
        }
        books.values().forEach(System.out::println);
    }

    private static void searchBook() {
        System.out.print("Enter Book ID or Title: ");
        String query = scanner.nextLine();
        books.values().stream()
             .filter(book -> book.getId().equalsIgnoreCase(query) || book.getTitle().equalsIgnoreCase(query))
             .forEach(System.out::println);
    }

    private static void updateBook() {
        System.out.print("Enter Book ID to update: ");
        String id = scanner.nextLine();
        if (!books.containsKey(id)) {
            System.out.println("Book not found!");
            return;
        }
        Book book = books.get(id);
        System.out.print("Enter new Title (leave blank to keep unchanged): ");
        String title = scanner.nextLine();
        if (!title.isEmpty()) book.setTitle(title);
        System.out.print("Enter new Author (leave blank to keep unchanged): ");
        String author = scanner.nextLine();
        if (!author.isEmpty()) book.setAuthor(author);
        System.out.print("Enter new Genre (leave blank to keep unchanged): ");
        String genre = scanner.nextLine();
        if (!genre.isEmpty()) book.setGenre(genre);
        System.out.print("Enter new Availability (Available/Checked Out): ");
        String availability = scanner.nextLine();
        if (!availability.isEmpty() && (availability.equalsIgnoreCase("Available") || availability.equalsIgnoreCase("Checked Out"))) {
            book.setAvailability(availability);
        }
        System.out.println("Book updated successfully!");
    }

    private static void deleteBook() {
        System.out.print("Enter Book ID to delete: ");
        String id = scanner.nextLine();
        if (books.remove(id) != null) {
            System.out.println("Book deleted successfully!");
        } else {
            System.out.println("Book not found!");
        }
    }
}
